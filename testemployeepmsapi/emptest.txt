application properties


# Tomcat Server properties
server.port=8084
server.servlet.context-path=/employeehive


# MySQL Database properties
spring.datasource.url=jdbc:mysql://localhost:3307/employeedb?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=Aman@1990
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate Properties
# Tables created Automatically
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=true


-----------------------------------------------------------------------------
model. Employee

package com.dac.employee.model;

import java.nio.charset.StandardCharsets;
import java.sql.Date;
import java.util.Base64;

import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;




	
	@Entity
	@Table(name="employee")
	public class Employee {

		@Id
		@GeneratedValue(strategy = GenerationType.IDENTITY,generator = "employee_seq")
		@SequenceGenerator(name="employee_seq",initialValue = 101,allocationSize = 1)
		@Column(name="eid")
		private Long eid;

		@Column(name="first_name",nullable = false) //not null constraint
		private String fname;

		@Column(name="last_name",nullable = false)
		private String lname;

		@NotBlank(message = "Password cannot be blank")
		@Size(min = 8, max = 255, message = "Password must be between 8 and 255 characters")
		@Column(name = "password", nullable = false)
		private String password;

		@Column(nullable = false)    
		private String dept;
		
		@JsonFormat(pattern="yyyy-MM-dd")
		@Column(nullable = false)
		private Date dob; 	
		
		@Column(nullable = false)    
		private Long sallery;

		public Long getEid() {
			return eid;
		}

		public void setEid(Long eid) {
			this.eid = eid;
		}

		public String getFname() {
			return fname;
		}

		public void setFname(String fname) {
			this.fname = fname;
		}

		public String getLname() {
			return lname;
		}

		public void setLname(String lname) {
			this.lname = lname;
		}

		public String getPassword() {
			return password;
		}

		public void setPassword(String password) {
			Base64.Encoder encoder = Base64.getEncoder();  //Use Base64 class for password Encryption
	        String normalString = password;
	        String encodedString = encoder.encodeToString(   // encrypt password in database field
	        normalString.getBytes(StandardCharsets.UTF_8) );
	        this.password = encodedString;
		}

		public String getDept() {
			return dept;
		}

		public void setDept(String dept) {
			this.dept = dept;
		}

		public Date getDob() {
			return dob;
		}

		public void setDob(Date dob) {
			this.dob = dob;
		}

		public Long getSallery() {
			return sallery;
		}

		public void setSallery(Long sallery) {
			this.sallery = sallery;
		}

		public Employee(Long eid, String fname, String lname,
				@NotBlank(message = "Password cannot be blank") @Size(min = 8, max = 255, message = "Password must be between 8 and 255 characters") String password,
				String dept, Date dob, Long sallery) {
			this.eid = eid;
			this.fname = fname;
			this.lname = lname;
			this.password = password;
			this.dept = dept;
			this.dob = dob;
			this.sallery = sallery;
		}

		public Employee() {
			super();
			// TODO Auto-generated constructor stub
		}
		
		
		
}



---------------------------------------------------------------------------------------

repository employee

package com.dac.employee.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.dac.employee.model.Employee;
import java.util.List;



public interface EmployeeRepository  extends JpaRepository<Employee, Long>{

	
	
	public Optional<Employee> findByEid(Long eid);
	
	public Optional<Employee> findByLname(String lname);
	
	

}
	-----------------------------------------------------------------------------

emp service vala 

package com.dac.employee.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.dac.employee.model.Employee;
import com.dac.employee.repository.EmployeeRepository;


@Service

public class EmployeeService {




private final EmployeeRepository employeeRepository;

public EmployeeService(EmployeeRepository employeeRepository) {
	
	this.employeeRepository = employeeRepository;
} 


public Employee saveEmployee(Employee p) {
	return employeeRepository.save(p); 
}


public List<Employee> listAll(){
	return employeeRepository.findAll();
	}


   public Optional<Employee> getSingleEmployee(long pid) {
	   return employeeRepository.findById(pid);       
   }
   
   public void deleteEmployee(long pid) {
	   employeeRepository.deleteById(pid); 
   }
   
//   public List<Employee> searchProductsByName(String name){
//	   return employeeRepository.findProductsByNameContainingIgnoreCase(name); //Invokes method with custom query
//   }
}


---------------------------------------------------------------------------

emp controller


package com.dac.employee.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.dac.employee.exception.ResourceNotFoundException;
import com.dac.employee.model.Employee;
import com.dac.employee.service.EmployeeService;


@RestController
@RequestMapping("/api")
public class EmployeeController {

	
	

	@Autowired
	private EmployeeService empService;
	
	@PostMapping("/employees")
	public ResponseEntity<Employee> saveEmployee(@Validated @RequestBody Employee  e) {
				try {
			
					Employee emp1=empService.saveEmployee(e);
		return ResponseEntity.status(HttpStatus.CREATED).body(emp1);
		
		} catch(Exception ex)
		{
			 ex.printStackTrace();
			 return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
					 
		}
	}
	
	@GetMapping("/employees")
	public ResponseEntity<List<Employee>> displayAllEmployee(){
		try {
			List<Employee> emp=empService.listAll();
			return ResponseEntity.ok(emp);
		} catch(Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		}
	}
	
	
	
	
	@GetMapping("/employee/{eid}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable(value="eid") Long eId) 
			throws ResourceNotFoundException{

		Employee e=empService.getSingleEmployee(eId).orElseThrow(() ->
		new  ResourceNotFoundException("employee Not Found for this Id : "+eId)); 

		return ResponseEntity.ok(e);
	}
	
	
	@PutMapping("/employee/{eid}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable(value="eid") Long eId,
	        @Validated @RequestBody Employee e) throws ResourceNotFoundException {

	    
		Employee employee = empService.getSingleEmployee(eId)
	            .orElseThrow(() -> new ResourceNotFoundException("employee Not Found for this Id : " + eId));

	    
		employee.setDept(e.getDept());
		employee.setFname(e.getFname());
		employee.setLname(e.getLname());
		employee.setSallery(e.getSallery());

	   
	    final Employee updatedemp = empService.saveEmployee(employee); 
	    return ResponseEntity.ok().body(updatedemp);
	}

	
	
			@DeleteMapping("/employee/{eid}")
			public ResponseEntity<Map<String,Boolean>> deleteEmployee(@PathVariable(value="eid") Long eId) 
					throws ResourceNotFoundException {

				empService.getSingleEmployee(eId).  
				orElseThrow(() -> new ResourceNotFoundException("Employe Not Found for this Id :"+eId));

				empService.deleteEmployee(eId); 

				Map<String,Boolean> response=new HashMap<>();
				response.put("Deleted", Boolean.TRUE);
				
				return ResponseEntity.ok(response);
			}
				
}
